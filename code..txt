#Game.py
import pygame
from pygame.locals import *
import sys
from Classes import *
size = width, height = 800, 600
screen = pygame.display.set_mode(size)

def main():
    pygame.init()
    pygame.mixer.init() 
    music = pygame.mixer.Sound('../Sound/HaloTheme.mp3')
    #pygame.mixer.Sound.play(music)
    background_image = pygame.image.load('../images/background1800x600.png')
    background_rect = background_image.get_rect()
    pygame.display.set_caption('Asteroid')
    ship = Ship(size)
    asteroids = []
    while 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT: #detectar e
                sys.exit() 
        ship.update() 
        
            
        screen.blit(background_image, background_rect) #mostrar imagen, background_image es el contenido, background_rect es el contenedor
        screen.blit(ship.image, ship.rect)
        
          
        if random.randint(0,100) % 25 == 0 and len(asteroids) < 10:
            asteroids.append(Asteroid(size))
            
        for asteroid in asteroids:
            asteroid.update()
            screen.blit(asteroid.image, asteroid.rect)
        
        for bullet in ship.bullets: 
            bullet.update()
            if bullet.alcance == 0:
                ship.bullets.remove(bullet)      
            screen.blit(bullet.image, bullet.rect)
        pygame.display.update()
        pygame.time.delay(10)
        
    

if __name__ == '__main__':
    main()
#end Game.py

#Classes.py
import pygame
from pygame.locals import *
from pygame.sprite import Sprite
import math
import random

class Ship(Sprite):
    def __init__(self,contenedor):
        self.puntos = 0
        self.vida = 100
        self.radio = 8
        self.velocidad = [0,0]
        self.angulo = 0
        self.contenedor = contenedor
        self.image = pygame.image.load('../images/Sprites/bedrull32x32.png')
        self.image_base = self.image
        self.bullets = []
        self.rect = self.image.get_rect()
        self.rect.move_ip(contenedor[0]/2, contenedor[1]/2)   

    def update(self):
        teclas = pygame.key.get_pressed()
     
        if teclas[pygame.K_LEFT]:
                self.rotar(2)
                self.rect = self.rect.move(self.velocidad)   

        elif teclas[pygame.K_RIGHT]:
                self.rotar(-2)
                
        elif teclas[pygame.K_UP]:
            self.acelerar()

        elif teclas[pygame.K_SPACE]:
             self.disparar()
               
           

            
        self.velocidad[0] *= 0.9   
        self.velocidad[1] *= 0.9 
        
        self.rect = self.rect.move(self.velocidad)   
        
  #tracklimits
        self.rect.x %= self.contenedor[0]
        self.rect.y %= self.contenedor[1]
        

    def acelerar(self):
        self.velocidad[0] += math.cos(math.radians(self.angulo+90%360))
        self.velocidad[1] -= math.sin(math.radians(self.angulo+90%360))
    
    def rotar(self,angulo):
        self.angulo += angulo
        centro_X =self.rect.centerx
        centro_Y =self.rect.centery
        self.image = pygame.transform.rotate(self.image_base, self.angulo)
        self.rect.centerx = centro_X
        self.rect.centery = centro_Y
     
    def disparar(self):
        #self.disparo.play()
        vector = [0,0]
        vector[0] += math.cos(math.radians((self.angulo+90)%360))
        vector[1] -= math.sin(math.radians((self.angulo+90)%360))
        pos = [self.rect.x + self.radio, self.rect.y + self.radio]
        vel = [self.velocidad[0] + 6 * vector[0], self.velocidad[1] + 6 * vector[1]]
        self.bullets.append(Bullet(pos,self.angulo, vel, self.contenedor)) 
      
        
    """def limits(self):
        if self.rect.x >= 800 or  self.rect.y >= 600:
            print('Track limits!') """

class Bullet(Sprite):
    def __init__(self, pos, angle, vel, cont):
        Sprite.__init__(self)
        self.vel = vel
        self.alcance = 25
        self.contenedor = cont
        self.image = pygame.image.load("../images/Sprites/Bulletnya132x32.png")
        self.rect = self.image.get_rect()
        self.rect.move_ip(pos[0], pos[1])
        self.angulo = angle
        
        
    def update(self):
        self.alcance -= 1
        self.vel[0] += math.cos(math.radians((self.angulo+90)%360))
        self.vel[1] -= math.sin(math.radians((self.angulo+90)%360))
        self.rect = self.rect.move(self.vel)
        self.rect.x = self.rect.x % self.contenedor[0]
        self.rect.y = self.rect.y % self.contenedor[1]

class Asteroid(Sprite):
    def __init__(self, cont):
        Sprite.__init__(self)
        self.vel = [random.randint(-2,2),random.randint(-2,2)]
        self.contenedor = cont
        self.angulo = 0
        self.rotacion = random.randint(-20,20)
        self.base_image = pygame.image.load("imagenes/asteroid.png")
        self.image = self.base_image
        self.rect = self.image.get_rect()
        self.rect.move_ip(random.randint(0,self.contenedor[0]), random.randint(0,self.contenedor[1]))
        #self.explosion = pygame.mixer.Sound('sonidos/explosion.wav')
        self.explosion.set_volume(0.05)
        
        
    def update(self): 
        self.angulo += self.rotacion   
        centerx = self.rect.centerx
        centery = self.rect.centery
        self.image = pygame.transform.rotate(self.base_image, self.angulo)
        self.rect = self.image.get_rect() 
        self.rect.centerx = centerx
        self.rect.centery = centery
        self.rect = self.rect.move(self.vel)
        self.rect.x = self.rect.x % self.contenedor[0]
        self.rect.y = self.rect.y % self.contenedor[1]
    
    def explotar(self):
        self.image = pygame.image.load("imagenes/explosion.png")
        #self.explosion.play()
#end Classes.py
   
        

"""https://github.com/apdaza/pygame/blob/master/ejercicio05/asteroids_005/asteroids.py"""
